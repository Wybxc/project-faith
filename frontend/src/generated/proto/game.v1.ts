// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: game.v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";

export const protobufPackage = "game.v1";

export interface JoinRoomRequest {
  readonly roomName: string;
}

export interface JoinRoomResponse {
  readonly message: string;
  readonly success: boolean;
  readonly roomId: Long;
}

export interface EnterGameRequest {
  readonly roomId: Long;
}

export interface GameEvent {
  readonly eventType?: { readonly $case: "stateUpdate"; readonly value: GameState } | {
    readonly $case: "requestUserEvent";
    readonly value: RequestUserEvent;
  } | undefined;
}

export interface GameState {
  readonly debugLog: readonly string[];
  readonly selfHand: readonly HandCard[];
  readonly otherHandCount: number;
  readonly selfDeckCount: number;
  readonly otherDeckCount: number;
  readonly roundNumber: number;
  readonly isMyTurn: boolean;
  readonly gameFinished: boolean;
  readonly selfFaithCards: readonly number[];
  readonly otherFaithCards: readonly number[];
}

export interface RequestUserEvent {
  readonly seqnum: Long;
  readonly timeout: number;
  readonly eventType?: { readonly $case: "turnAction"; readonly value: RequestTurnAction } | undefined;
}

export interface UserEvent {
  readonly seqnum: Long;
  readonly roomId: Long;
  readonly eventType?: { readonly $case: "playCard"; readonly value: PlayCard } | {
    readonly $case: "endTurn";
    readonly value: EndTurn;
  } | undefined;
}

export interface UserEventResponse {
}

export interface RequestTurnAction {
  readonly playableCards: readonly number[];
}

export interface HandCard {
  readonly cardId: number;
  readonly entity: number;
}

export interface PlayCard {
  readonly entity: number;
}

export interface EndTurn {
}

function createBaseJoinRoomRequest(): JoinRoomRequest {
  return { roomName: "" };
}

export const JoinRoomRequest: MessageFns<JoinRoomRequest> = {
  encode(message: JoinRoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRoomRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<JoinRoomRequest>, I>>(base?: I): JoinRoomRequest {
    return JoinRoomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinRoomRequest>, I>>(object: I): JoinRoomRequest {
    const message = createBaseJoinRoomRequest() as any;
    message.roomName = object.roomName ?? "";
    return message;
  },
};

function createBaseJoinRoomResponse(): JoinRoomResponse {
  return { message: "", success: false, roomId: Long.UZERO };
}

export const JoinRoomResponse: MessageFns<JoinRoomResponse> = {
  encode(message: JoinRoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (!message.roomId.equals(Long.UZERO)) {
      writer.uint32(25).fixed64(message.roomId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRoomResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.roomId = Long.fromString(reader.fixed64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<JoinRoomResponse>, I>>(base?: I): JoinRoomResponse {
    return JoinRoomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinRoomResponse>, I>>(object: I): JoinRoomResponse {
    const message = createBaseJoinRoomResponse() as any;
    message.message = object.message ?? "";
    message.success = object.success ?? false;
    message.roomId = (object.roomId !== undefined && object.roomId !== null)
      ? Long.fromValue(object.roomId)
      : Long.UZERO;
    return message;
  },
};

function createBaseEnterGameRequest(): EnterGameRequest {
  return { roomId: Long.UZERO };
}

export const EnterGameRequest: MessageFns<EnterGameRequest> = {
  encode(message: EnterGameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.roomId.equals(Long.UZERO)) {
      writer.uint32(9).fixed64(message.roomId.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnterGameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterGameRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.roomId = Long.fromString(reader.fixed64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<EnterGameRequest>, I>>(base?: I): EnterGameRequest {
    return EnterGameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnterGameRequest>, I>>(object: I): EnterGameRequest {
    const message = createBaseEnterGameRequest() as any;
    message.roomId = (object.roomId !== undefined && object.roomId !== null)
      ? Long.fromValue(object.roomId)
      : Long.UZERO;
    return message;
  },
};

function createBaseGameEvent(): GameEvent {
  return { eventType: undefined };
}

export const GameEvent: MessageFns<GameEvent> = {
  encode(message: GameEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.eventType?.$case) {
      case "stateUpdate":
        GameState.encode(message.eventType.value, writer.uint32(10).fork()).join();
        break;
      case "requestUserEvent":
        RequestUserEvent.encode(message.eventType.value, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameEvent() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = { $case: "stateUpdate", value: GameState.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = { $case: "requestUserEvent", value: RequestUserEvent.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GameEvent>, I>>(base?: I): GameEvent {
    return GameEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameEvent>, I>>(object: I): GameEvent {
    const message = createBaseGameEvent() as any;
    switch (object.eventType?.$case) {
      case "stateUpdate": {
        if (object.eventType?.value !== undefined && object.eventType?.value !== null) {
          message.eventType = { $case: "stateUpdate", value: GameState.fromPartial(object.eventType.value) };
        }
        break;
      }
      case "requestUserEvent": {
        if (object.eventType?.value !== undefined && object.eventType?.value !== null) {
          message.eventType = {
            $case: "requestUserEvent",
            value: RequestUserEvent.fromPartial(object.eventType.value),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseGameState(): GameState {
  return {
    debugLog: [],
    selfHand: [],
    otherHandCount: 0,
    selfDeckCount: 0,
    otherDeckCount: 0,
    roundNumber: 0,
    isMyTurn: false,
    gameFinished: false,
    selfFaithCards: [],
    otherFaithCards: [],
  };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.debugLog) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.selfHand) {
      HandCard.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.otherHandCount !== 0) {
      writer.uint32(24).uint32(message.otherHandCount);
    }
    if (message.selfDeckCount !== 0) {
      writer.uint32(32).uint32(message.selfDeckCount);
    }
    if (message.otherDeckCount !== 0) {
      writer.uint32(40).uint32(message.otherDeckCount);
    }
    if (message.roundNumber !== 0) {
      writer.uint32(48).uint32(message.roundNumber);
    }
    if (message.isMyTurn !== false) {
      writer.uint32(56).bool(message.isMyTurn);
    }
    if (message.gameFinished !== false) {
      writer.uint32(64).bool(message.gameFinished);
    }
    writer.uint32(74).fork();
    for (const v of message.selfFaithCards) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(82).fork();
    for (const v of message.otherFaithCards) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.debugLog.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selfHand.push(HandCard.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.otherHandCount = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.selfDeckCount = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.otherDeckCount = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.roundNumber = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isMyTurn = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.gameFinished = reader.bool();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.selfFaithCards.push(reader.uint32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.selfFaithCards.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag === 80) {
            message.otherFaithCards.push(reader.uint32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.otherFaithCards.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState() as any;
    message.debugLog = object.debugLog?.map((e) => e) || [];
    message.selfHand = object.selfHand?.map((e) => HandCard.fromPartial(e)) || [];
    message.otherHandCount = object.otherHandCount ?? 0;
    message.selfDeckCount = object.selfDeckCount ?? 0;
    message.otherDeckCount = object.otherDeckCount ?? 0;
    message.roundNumber = object.roundNumber ?? 0;
    message.isMyTurn = object.isMyTurn ?? false;
    message.gameFinished = object.gameFinished ?? false;
    message.selfFaithCards = object.selfFaithCards?.map((e) => e) || [];
    message.otherFaithCards = object.otherFaithCards?.map((e) => e) || [];
    return message;
  },
};

function createBaseRequestUserEvent(): RequestUserEvent {
  return { seqnum: Long.UZERO, timeout: 0, eventType: undefined };
}

export const RequestUserEvent: MessageFns<RequestUserEvent> = {
  encode(message: RequestUserEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.seqnum.equals(Long.UZERO)) {
      writer.uint32(9).fixed64(message.seqnum.toString());
    }
    if (message.timeout !== 0) {
      writer.uint32(16).int32(message.timeout);
    }
    switch (message.eventType?.$case) {
      case "turnAction":
        RequestTurnAction.encode(message.eventType.value, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestUserEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestUserEvent() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.seqnum = Long.fromString(reader.fixed64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timeout = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = { $case: "turnAction", value: RequestTurnAction.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RequestUserEvent>, I>>(base?: I): RequestUserEvent {
    return RequestUserEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestUserEvent>, I>>(object: I): RequestUserEvent {
    const message = createBaseRequestUserEvent() as any;
    message.seqnum = (object.seqnum !== undefined && object.seqnum !== null)
      ? Long.fromValue(object.seqnum)
      : Long.UZERO;
    message.timeout = object.timeout ?? 0;
    switch (object.eventType?.$case) {
      case "turnAction": {
        if (object.eventType?.value !== undefined && object.eventType?.value !== null) {
          message.eventType = { $case: "turnAction", value: RequestTurnAction.fromPartial(object.eventType.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseUserEvent(): UserEvent {
  return { seqnum: Long.UZERO, roomId: Long.UZERO, eventType: undefined };
}

export const UserEvent: MessageFns<UserEvent> = {
  encode(message: UserEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.seqnum.equals(Long.UZERO)) {
      writer.uint32(9).fixed64(message.seqnum.toString());
    }
    if (!message.roomId.equals(Long.UZERO)) {
      writer.uint32(17).fixed64(message.roomId.toString());
    }
    switch (message.eventType?.$case) {
      case "playCard":
        PlayCard.encode(message.eventType.value, writer.uint32(26).fork()).join();
        break;
      case "endTurn":
        EndTurn.encode(message.eventType.value, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserEvent() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.seqnum = Long.fromString(reader.fixed64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.roomId = Long.fromString(reader.fixed64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = { $case: "playCard", value: PlayCard.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.eventType = { $case: "endTurn", value: EndTurn.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserEvent>, I>>(base?: I): UserEvent {
    return UserEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserEvent>, I>>(object: I): UserEvent {
    const message = createBaseUserEvent() as any;
    message.seqnum = (object.seqnum !== undefined && object.seqnum !== null)
      ? Long.fromValue(object.seqnum)
      : Long.UZERO;
    message.roomId = (object.roomId !== undefined && object.roomId !== null)
      ? Long.fromValue(object.roomId)
      : Long.UZERO;
    switch (object.eventType?.$case) {
      case "playCard": {
        if (object.eventType?.value !== undefined && object.eventType?.value !== null) {
          message.eventType = { $case: "playCard", value: PlayCard.fromPartial(object.eventType.value) };
        }
        break;
      }
      case "endTurn": {
        if (object.eventType?.value !== undefined && object.eventType?.value !== null) {
          message.eventType = { $case: "endTurn", value: EndTurn.fromPartial(object.eventType.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseUserEventResponse(): UserEventResponse {
  return {};
}

export const UserEventResponse: MessageFns<UserEventResponse> = {
  encode(_: UserEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserEventResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<UserEventResponse>, I>>(base?: I): UserEventResponse {
    return UserEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserEventResponse>, I>>(_: I): UserEventResponse {
    const message = createBaseUserEventResponse() as any;
    return message;
  },
};

function createBaseRequestTurnAction(): RequestTurnAction {
  return { playableCards: [] };
}

export const RequestTurnAction: MessageFns<RequestTurnAction> = {
  encode(message: RequestTurnAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.playableCards) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestTurnAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestTurnAction() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.playableCards.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playableCards.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<RequestTurnAction>, I>>(base?: I): RequestTurnAction {
    return RequestTurnAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestTurnAction>, I>>(object: I): RequestTurnAction {
    const message = createBaseRequestTurnAction() as any;
    message.playableCards = object.playableCards?.map((e) => e) || [];
    return message;
  },
};

function createBaseHandCard(): HandCard {
  return { cardId: 0, entity: 0 };
}

export const HandCard: MessageFns<HandCard> = {
  encode(message: HandCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cardId !== 0) {
      writer.uint32(8).uint32(message.cardId);
    }
    if (message.entity !== 0) {
      writer.uint32(16).uint32(message.entity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandCard() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cardId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.entity = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<HandCard>, I>>(base?: I): HandCard {
    return HandCard.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandCard>, I>>(object: I): HandCard {
    const message = createBaseHandCard() as any;
    message.cardId = object.cardId ?? 0;
    message.entity = object.entity ?? 0;
    return message;
  },
};

function createBasePlayCard(): PlayCard {
  return { entity: 0 };
}

export const PlayCard: MessageFns<PlayCard> = {
  encode(message: PlayCard, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== 0) {
      writer.uint32(8).uint32(message.entity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayCard {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayCard() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.entity = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<PlayCard>, I>>(base?: I): PlayCard {
    return PlayCard.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayCard>, I>>(object: I): PlayCard {
    const message = createBasePlayCard() as any;
    message.entity = object.entity ?? 0;
    return message;
  },
};

function createBaseEndTurn(): EndTurn {
  return {};
}

export const EndTurn: MessageFns<EndTurn> = {
  encode(_: EndTurn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndTurn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndTurn() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<EndTurn>, I>>(base?: I): EndTurn {
    return EndTurn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndTurn>, I>>(_: I): EndTurn {
    const message = createBaseEndTurn() as any;
    return message;
  },
};

export interface GameService {
  JoinRoom(request: DeepPartial<JoinRoomRequest>, metadata?: grpc.Metadata): Promise<JoinRoomResponse>;
  EnterGame(request: DeepPartial<EnterGameRequest>, metadata?: grpc.Metadata): Observable<GameEvent>;
  SubmitUserEvent(request: DeepPartial<UserEvent>, metadata?: grpc.Metadata): Promise<UserEventResponse>;
}

export class GameServiceClientImpl implements GameService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.JoinRoom = this.JoinRoom.bind(this);
    this.EnterGame = this.EnterGame.bind(this);
    this.SubmitUserEvent = this.SubmitUserEvent.bind(this);
  }

  JoinRoom(request: DeepPartial<JoinRoomRequest>, metadata?: grpc.Metadata): Promise<JoinRoomResponse> {
    return this.rpc.unary(GameServiceJoinRoomDesc, JoinRoomRequest.fromPartial(request), metadata);
  }

  EnterGame(request: DeepPartial<EnterGameRequest>, metadata?: grpc.Metadata): Observable<GameEvent> {
    return this.rpc.invoke(GameServiceEnterGameDesc, EnterGameRequest.fromPartial(request), metadata);
  }

  SubmitUserEvent(request: DeepPartial<UserEvent>, metadata?: grpc.Metadata): Promise<UserEventResponse> {
    return this.rpc.unary(GameServiceSubmitUserEventDesc, UserEvent.fromPartial(request), metadata);
  }
}

export const GameServiceDesc = { serviceName: "game.v1.GameService" };

export const GameServiceJoinRoomDesc: UnaryMethodDefinitionish = {
  methodName: "JoinRoom",
  service: GameServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return JoinRoomRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = JoinRoomResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const GameServiceEnterGameDesc: UnaryMethodDefinitionish = {
  methodName: "EnterGame",
  service: GameServiceDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return EnterGameRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GameEvent.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const GameServiceSubmitUserEventDesc: UnaryMethodDefinitionish = {
  methodName: "SubmitUserEvent",
  service: GameServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UserEvent.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = UserEventResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string; value: unknown }
    ? { readonly $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
