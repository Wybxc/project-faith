// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: card.v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";

export const protobufPackage = "card.v1";

export interface GetCardPrototypesRequest {
}

export interface GetCardPrototypesResponse {
  readonly prototypes: { [key: number]: CardPrototype };
}

export interface GetCardPrototypesResponse_PrototypesEntry {
  readonly key: number;
  readonly value: CardPrototype | undefined;
}

export interface CardPrototype {
  readonly name: string;
  readonly description: string;
}

function createBaseGetCardPrototypesRequest(): GetCardPrototypesRequest {
  return {};
}

export const GetCardPrototypesRequest: MessageFns<GetCardPrototypesRequest> = {
  encode(_: GetCardPrototypesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCardPrototypesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCardPrototypesRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetCardPrototypesRequest>, I>>(base?: I): GetCardPrototypesRequest {
    return GetCardPrototypesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCardPrototypesRequest>, I>>(_: I): GetCardPrototypesRequest {
    const message = createBaseGetCardPrototypesRequest() as any;
    return message;
  },
};

function createBaseGetCardPrototypesResponse(): GetCardPrototypesResponse {
  return { prototypes: {} };
}

export const GetCardPrototypesResponse: MessageFns<GetCardPrototypesResponse> = {
  encode(message: GetCardPrototypesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.prototypes).forEach(([key, value]) => {
      GetCardPrototypesResponse_PrototypesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCardPrototypesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCardPrototypesResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GetCardPrototypesResponse_PrototypesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.prototypes[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetCardPrototypesResponse>, I>>(base?: I): GetCardPrototypesResponse {
    return GetCardPrototypesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCardPrototypesResponse>, I>>(object: I): GetCardPrototypesResponse {
    const message = createBaseGetCardPrototypesResponse() as any;
    message.prototypes = Object.entries(object.prototypes ?? {}).reduce<{ [key: number]: CardPrototype }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = CardPrototype.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseGetCardPrototypesResponse_PrototypesEntry(): GetCardPrototypesResponse_PrototypesEntry {
  return { key: 0, value: undefined };
}

export const GetCardPrototypesResponse_PrototypesEntry: MessageFns<GetCardPrototypesResponse_PrototypesEntry> = {
  encode(message: GetCardPrototypesResponse_PrototypesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      CardPrototype.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCardPrototypesResponse_PrototypesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCardPrototypesResponse_PrototypesEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = CardPrototype.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GetCardPrototypesResponse_PrototypesEntry>, I>>(
    base?: I,
  ): GetCardPrototypesResponse_PrototypesEntry {
    return GetCardPrototypesResponse_PrototypesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCardPrototypesResponse_PrototypesEntry>, I>>(
    object: I,
  ): GetCardPrototypesResponse_PrototypesEntry {
    const message = createBaseGetCardPrototypesResponse_PrototypesEntry() as any;
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? CardPrototype.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseCardPrototype(): CardPrototype {
  return { name: "", description: "" };
}

export const CardPrototype: MessageFns<CardPrototype> = {
  encode(message: CardPrototype, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CardPrototype {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCardPrototype() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CardPrototype>, I>>(base?: I): CardPrototype {
    return CardPrototype.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CardPrototype>, I>>(object: I): CardPrototype {
    const message = createBaseCardPrototype() as any;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

export interface CardService {
  GetCardPrototypes(
    request: DeepPartial<GetCardPrototypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCardPrototypesResponse>;
}

export class CardServiceClientImpl implements CardService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GetCardPrototypes = this.GetCardPrototypes.bind(this);
  }

  GetCardPrototypes(
    request: DeepPartial<GetCardPrototypesRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCardPrototypesResponse> {
    return this.rpc.unary(CardServiceGetCardPrototypesDesc, GetCardPrototypesRequest.fromPartial(request), metadata);
  }
}

export const CardServiceDesc = { serviceName: "card.v1.CardService" };

export const CardServiceGetCardPrototypesDesc: UnaryMethodDefinitionish = {
  methodName: "GetCardPrototypes",
  service: CardServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCardPrototypesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCardPrototypesResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { readonly $case: string; value: unknown }
    ? { readonly $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
